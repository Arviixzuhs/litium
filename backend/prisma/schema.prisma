generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =======================
// MODELOS DE USUARIO Y ROLES
// =======================

model User {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  email     String?   @unique @db.VarChar(100)
  avatar    String?   @default("") @db.VarChar(200)
  lastName  String    @db.VarChar(50)
  password  String?   @db.VarChar(200)
  createdAt DateTime? @default(now())

  roles    RoleUser[]
  carts    ShoppingCart[]
  replies  Reply[]
  Message  Message[]
  comments Comment[]
  invoices Invoice[]      @relation("SellerInvoices")
  sessions RefreshToken[]
  messages Message[]      @relation("UserMessages")
}

model Role {
  id          Int               @id @default(autoincrement())
  name        String            @db.VarChar(50)
  users       RoleUser[]
  createdAt   DateTime          @default(now())
  permissions RolePermission[]
}

model RoleUser {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  userId Int
  roleId Int
}

model RolePermission {
  id     Int    @id @default(autoincrement())
  name   String @db.VarChar(50)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique @db.VarChar(250)
  userId    Int
  createdAt DateTime @default(now())
  expiredAt DateTime
}

// =======================
// PRODUCTOS Y CATÁLOGOS
// =======================

model Product {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  show        String?   @db.VarChar(50)
  stock       Int?
  image       String?   @db.VarChar(250)
  price       Float?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  isDeleted   Boolean?  @default(false)
  description String?   @db.VarChar(150)

  // Relaciones
  images             ImageProduct[]
  comments           Comment[]
  categories         Product_x_Category[]
  shoppingCarts      ShoppingCartProduct[]
  specifications     ProductSpecification[]
  product_x_catalog  Product_x_Catalog[]
  product_x_supplier Product_x_Supplier[]
}

model ProductSpecification {
  id        Int     @id @default(autoincrement())
  title     String  @db.VarChar(100)
  value     String  @db.VarChar(180)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model ImageProduct {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageURL  String   @db.VarChar(150)
  productId Int
  createdAt DateTime @default(now())
}

model Catalog {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(50)
  updatedAt         DateTime?
  description       String?             @db.VarChar(150)
  product_x_catalog Product_x_Catalog[]
  createdAt         DateTime            @default(now())
  deletedAt         DateTime?
  isDeleted         Boolean?            @default(false)
}

model Product_x_Catalog {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  catalog   Catalog  @relation(fields: [catalogId], references: [id], onDelete: Cascade)
  productId Int
  catalogId Int
  createdAt DateTime @default(now())
}

// =======================
// PROVEEDORES DE PRODUCTOS
// =======================

model Supplier {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  phone     String?   @db.VarChar(20)
  email     String?   @unique @db.VarChar(100)
  address   String?   @db.VarChar(150)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  product_x_supplier Product_x_Supplier[]
}

model Product_x_Supplier {
  id         Int @id @default(autoincrement())
  productId  Int
  supplierId Int

  product   Product  @relation(fields: [productId], references: [id])
  supplier  Supplier @relation(fields: [supplierId], references: [id])
  createdAt DateTime @default(now())
}

// =======================
// CATEGORIAS DE PRODUCTOS
// =======================

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  isDeleted Boolean?  @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())

  product_x_category Product_x_Category[]
}

model Product_x_Category {
  id         Int @id @default(autoincrement())
  productId  Int
  categoryId Int

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category  Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

// =======================
// COMENTARIOS Y RESPUESTAS
// =======================

model Comment {
  id            Int       @id @default(autoincrement())
  userId        Int
  comment       String    @db.VarChar(250)
  productId     Int
  isDeleted     Boolean?  @default(false)
  deletedAt     DateTime?
  qualification Int

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  replies   Reply[]
  createdAt DateTime @default(now())
}

model Reply {
  id        Int    @id @default(autoincrement())
  userId    Int
  comment   String @db.VarChar(100)
  replyId   Int?
  commentId Int

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent     Reply?    @relation("ReplyToReply", fields: [replyId], references: [id])
  children   Reply[]   @relation("ReplyToReply")
  isDeleted  Boolean?  @default(false)
  commentRef Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
}

// =======================
// CARRITO Y FACTURAS
// =======================

enum ShoppingCartStatus {
  PENDING // Carrito creado pero aún no pagado
  PAID // Carrito pagado, confirmado como venta
  CANCELED // Carrito cancelado
}

model ShoppingCart {
  id        Int                   @id @default(autoincrement())
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String                @db.VarChar(50)
  userId    Int
  status    ShoppingCartStatus    @default(PENDING)
  products  ShoppingCartProduct[]
  messages  Message[]
  isDeleted Boolean?              @default(false)
  deletedAt DateTime?
  createdAt DateTime              @default(now())

  invoiceId Int?
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
}

model ShoppingCartProduct {
  id             Int      @id @default(autoincrement())
  quantity       Int
  productId      Int
  createdAt      DateTime @default(now())
  shoppingCartId Int

  product      Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  shoppingCart ShoppingCart @relation(fields: [shoppingCartId], references: [id], onDelete: Cascade)
}

model Invoice {
  id       Int     @id @default(autoincrement())
  rif      String? @db.VarChar(20)
  name     String  @db.VarChar(50)
  phone    String? @db.VarChar(50)
  total    Float?
  address  String? @db.VarChar(200)
  sellerId Int

  seller       User           @relation("SellerInvoices", fields: [sellerId], references: [id], onDelete: Cascade)
  isDeleted    Boolean?       @default(false)
  deletedAt    DateTime?
  createdAt    DateTime       @default(now())
  shoppingCart ShoppingCart[]
}

// =======================
// MENSAJES (CHAT)
// =======================

model Message {
  id             Int       @id @default(autoincrement())
  seen           Boolean?  @default(false)
  userId         Int
  message        String    @db.VarChar(180)
  senderId       Int
  isEdited       Boolean?  @default(false)
  isDeleted      Boolean?  @default(false)
  deletedAt      DateTime?
  editedAt       DateTime?
  createdAt      DateTime? @default(now())
  shoppingCartId Int

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sender       User         @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  shoppingCart ShoppingCart @relation(fields: [shoppingCartId], references: [id], onDelete: Cascade)
}
